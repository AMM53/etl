1634928070233:reticulate::repl_python()
1634928073174:import pandas as pd
1634928140554:df_hipotecas = pd.read_csv('../data/hipotecas/hipotecas_lectura')
1634928245763:df_hipotecas = pd.read_csv('/data/hipotecas/hipotecas_lectura')
1634928258280:df_hipotecas = pd.read_csv('data/hipotecas/hipotecas_lectura')
1634928264097:df_hipotecas = pd.read_csv('data/hipotecas/hipotecas_lectura', usecols=cols_usar)
1634928267786:cols_usar = ['period', 'total_nacional']
1634928268545:df_hipotecas = pd.read_csv('data/hipotecas/hipotecas_lectura', usecols=cols_usar)
1634928269775:df_hipotecas.head()
1634928270814:df_hipotecas = pd.read_csv('../data/hipotecas/hipotecas_lectura',
1634928278234:df_hipotecas = pd.read_csv('../data/hipotecas/hipotecas_lectura',
1634928281107:skiprows=7,
1634928281634:nrows=6,
1634928282150:header=None)
1634928283414:df_hipotecas.head()
1634928287226:df_hipotecas = pd.read_csv('../data/hipotecas/hipotecas_lectura',
1634928287234:skiprows=7,
1634928287240:nrows=6,
1634928287247:header=None)
1634928292117:df_hipotecas = pd.read_csv('data/hipotecas/hipotecas_lectura')
1634928293029:df_hipotecas.head()
1634928295566:cols_usar = ['period', 'total_nacional']
1634928307100:df_hipotecas = pd.read_csv('../data/hipotecas/hipotecas_lectura',
1634928307159:skiprows=7,
1634928307173:nrows=6,
1634928307181:header=None)
1634928317372:df_hipotecas = pd.read_csv('data/hipotecas/hipotecas_lectura',
1634928320977:df_hipotecas = pd.read_csv('data/hipotecas/hipotecas_lectura',
1634928320987:skiprows=7,
1634928320993:nrows=6,
1634928321000:header=None)
1634928322980:df_hipotecas.head()
1634928346738:import pandas as pd
1634928346756:df_hipotecas = pd.read_csv('data/hipotecas/hipotecas_lectura')
1634928346769:df_hipotecas.head()
1634928346872:cols_usar = ['period', 'total_nacional']
1634928346899:df_hipotecas = pd.read_csv('data/hipotecas/hipotecas_lectura', usecols=cols_usar)
1634928346919:df_hipotecas.head()
1634928346943:df_hipotecas = pd.read_csv('data/hipotecas/hipotecas_lectura',
1634928346951:skiprows=7,
1634928346961:nrows=6,
1634928346971:header=None)
1634928346990:df_hipotecas.head()
1634928370191:df_hipotecas = pd.read_csv('data/hipotecas/hipotecas_lectura')
1634928370933:df_hipotecas.head()
1634928377144:cols_usar = ['period', 'total_nacional']
1634928396326:df_hipotecas = pd.read_csv('data/hipotecas/hipotecas_lectura', usecols=cols_usar)
1634928397204:df_hipotecas.head()
1634928402423:df_hipotecas = pd.read_csv('data/hipotecas/hipotecas_lectura',
1634928404138:skiprows=7,
1634928404662:nrows=6,
1634928405218:header=None)
1634928406655:df_hipotecas.head()
1634928419171:df_hipotecas = pd.read_csv('data/hipotecas/hipotecas_lectura')
1634928419432:df_hipotecas.head()
1634928423621:df_hipotecas = pd.read_csv('data/hipotecas/hipotecas_lectura',
1634928423782:skiprows=7,
1634928424321:nrows=6,
1634928424528:header=None)
1634928425150:df_hipotecas.head()
1635264394587:path_to_file <- "data/ejemplos_lectura.xlsx"
1635264503302:path_to_file <- "data/ejemplos_lectura.xlsx"
1635264505145:df_ejemplos <- read_xlsx(path_to_file)
1635264508085:library(readxl)
1635264508304:path_to_file <- "data/ejemplos_lectura.xlsx"
1635264508305:df_ejemplos <- read_xlsx(path_to_file)
1635264508672:df_ejemplos
1635264508846:# Hay hojas ocultas
1635264508847:excel_sheets(path_to_file)
1635264508858:# Para leer una hoja en concreto
1635264508859:df_ejemplos <- read_xlsx(path_to_file, sheet = "Fechas")
1635264508883:df_ejemplos
1635264508909:# Para leer regiones
1635264508910:df_fechas <- read_xlsx(path_to_file,
1635264508911:sheet = "Fechas",
1635264508913:skip = 2,
1635264508914:col_types = c(rep("skip", 3), rep("guess", 5)))
1635264508943:df_fechas
1635264508967:# Para fechas más complicadas, trabajaremos con dplyr
1635264508967:df_chungo <- read_xlsx(path_to_file, sheet = "Holi")
1635264508988:df_chungo
1635264518617:df_ejemplos <- read_xlsx(path_to_file)
1635264519033:df_ejemplos
1635273308132:reticulate::repl_python()
1635273311091:# Conectamos a la base de datos
1635273311106:from sqlalchemy import create_engine
1635273311985:engine = create_engine('sqlite:///../data/indexKaggle.sqlite')
1635273312070:# Trabajaremos con pandas
1635273312077:import pandas as pd
1635273313084:# for downloading the entire table
1635273313093:# pd.read_sql('IndexMeta', engine)
1635273313106:# Cargamos en un DataFrame el resultado de una query SQL
1635273313112:an_entire_table = pd.read_sql('SELECT * FROM IndexMeta', engine)
1635273313137:an_entire_table.head()
1635273313152:# Exploración de tablas
1635273313159:from sqlalchemy import inspect
1635273313168:inspector = inspect(engine)
1635273313188:print(inspector.get_table_names())
1635273313215:inspector.get_columns('IndexPrice')
1635273313243:# Para limitar el número de filas
1635273313255:limited_prices = pd.read_sql('SELECT * FROM IndexPrice LIMIT 10', engine)
1635273313275:print(limited_prices)
1635273313294:limited_prices.close
1635273313309:# Para queries más complejas:
1635273313316:#
1635273313323:# - The evolution of the indexes from United States and Europe.
1635273313330:#   This region information is available in the `IndexMeta` table,
1635273313337:#   so we'll need a `JOIN` sentence.
1635273313343:# - We will download the price at the close and the volume, daily.
1635273313360:# - From 2019 and so forth.
1635273313366:# - We are also downloading the currency.
1635273313383:query = """
1635273313389:SELECT IndexMeta.region, IndexPrice.stock_index,
1635273313395:IndexPrice.date,
1635273313400:IndexPrice.adj_close, IndexPrice.volume,
1635273313406:IndexMeta.currency
1635273313412:FROM IndexPrice INNER JOIN IndexMeta
1635273313417:ON IndexPrice.stock_index = IndexMeta.stock_index
1635273313422:WHERE IndexMeta.region in ('United States', 'Europe') and
1635273313428:IndexPrice.date >= '2019-01-01'
1635273313434:"""
1635273313449:df_usa_eu_prices = pd.read_sql(query, engine)
1635273313460:df_usa_eu_prices.head()
1635273313481:df_usa_eu_prices.describe()
1635273321170:engine = create_engine('sqlite:///../data/indexKaggle.sqlite')
1635273323821:# Trabajaremos con pandas
1635273324550:import pandas as pd
1635273327531:an_entire_table = pd.read_sql('SELECT * FROM IndexMeta', engine)
1635273330309:an_entire_table.head()
1635273429772:engine = create_engine('sqlite:///../data/indexKaggle.sqlite')
1635273430215:# Trabajaremos con pandas
1635273430641:import pandas as pd
1635273431353:# for downloading the entire table
1635273431533:# pd.read_sql('IndexMeta', engine)
1635273431806:# Cargamos en un DataFrame el resultado de una query SQL
1635273432456:an_entire_table = pd.read_sql('SELECT * FROM IndexMeta', engine)
1635273437696:from sqlalchemy import create_engine
1635273438197:engine = create_engine('sqlite:///../data/indexKaggle.sqlite')
1635273438369:# Trabajaremos con pandas
1635273438810:import pandas as pd
1635273438991:# for downloading the entire table
1635273439731:# pd.read_sql('IndexMeta', engine)
1635273440189:# Cargamos en un DataFrame el resultado de una query SQL
1635273440589:an_entire_table = pd.read_sql('SELECT * FROM IndexMeta', engine)
1635273441090:an_entire_table.head()
1635273465915:from sqlalchemy import create_engine
1635273470362:engine = create_engine('sqlite:///../data/indexKaggle.sqlite')
1635273473206:import pandas as pd
1635273476004:an_entire_table = pd.read_sql('SELECT * FROM IndexMeta', engine)
1635273478878:an_entire_table.head()
1635273483078:from sqlalchemy import create_engine
1635273549772:engine = create_engine('sqlite:///../data/indexKaggle.sqlite')
1635273552317:engine = create_engine('sqlite:///../data/indexKaggle.sqlite')
1635273554503:engine
1635273568245:engine = create_engine('sqlite:///data/indexKaggle.sqlite')
1635273569657:# Trabajaremos con pandas
1635273569987:import pandas as pd
1635273570385:# for downloading the entire table
1635273570779:# pd.read_sql('IndexMeta', engine)
1635273570962:# Cargamos en un DataFrame el resultado de una query SQL
1635273571291:an_entire_table = pd.read_sql('SELECT * FROM IndexMeta', engine)
1635273571834:an_entire_table.head()
1635273615517:engine = create_engine('sqlite:///data/indexKaggle.sqlite')
1635273627350:# Conectamos a la base de datos
1635273627360:from sqlalchemy import create_engine
1635273627369:engine = create_engine('sqlite:///data/indexKaggle.sqlite')
1635273627383:# Trabajaremos con pandas
1635273627391:import pandas as pd
1635273627409:# for downloading the entire table
1635273627421:# pd.read_sql('IndexMeta', engine)
1635273627444:# Cargamos en un DataFrame el resultado de una query SQL
1635273627456:an_entire_table = pd.read_sql('SELECT * FROM IndexMeta', engine)
1635273627481:an_entire_table.head()
1635273627536:# Exploración de tablas
1635273627549:from sqlalchemy import inspect
1635273627574:inspector = inspect(engine)
1635273627591:print(inspector.get_table_names())
1635273627609:inspector.get_columns('IndexPrice')
1635273627626:# Para limitar el número de filas
1635273627632:limited_prices = pd.read_sql('SELECT * FROM IndexPrice LIMIT 10', engine)
1635273627644:print(limited_prices)
1635273627690:limited_prices.close
1635273627728:# Para queries más complejas:
1635273627739:#
1635273627747:# - The evolution of the indexes from United States and Europe.
1635273627754:#   This region information is available in the `IndexMeta` table,
1635273627761:#   so we'll need a `JOIN` sentence.
1635273627768:# - We will download the price at the close and the volume, daily.
1635273627775:# - From 2019 and so forth.
1635273627781:# - We are also downloading the currency.
1635273627798:query = """
1635273627804:SELECT IndexMeta.region, IndexPrice.stock_index,
1635273627810:IndexPrice.date,
1635273627816:IndexPrice.adj_close, IndexPrice.volume,
1635273627823:IndexMeta.currency
1635273627829:FROM IndexPrice INNER JOIN IndexMeta
1635273627835:ON IndexPrice.stock_index = IndexMeta.stock_index
1635273627841:WHERE IndexMeta.region in ('United States', 'Europe') and
1635273627846:IndexPrice.date >= '2019-01-01'
1635273627852:"""
1635273627865:df_usa_eu_prices = pd.read_sql(query, engine)
1635273627910:df_usa_eu_prices.head()
1635273627944:df_usa_eu_prices.describe()
1635273637832:df_usa_eu_prices = pd.read_sql(query, engine)
1635273640822:df_usa_eu_prices.head()
